# Russian translations for TGBot-Logging.
# Copyright (C) 2024 Kirill Bykov
# This file is distributed under the same license as the TGBot-Logging
# project.
msgid ""
msgstr ""
"Project-Id-Version: TGBot-Logging 0.1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-12-07 12:06+0100\n"
"PO-Revision-Date: 2024-01-06 12:00+0000\n"
"Last-Translator: Kirill Bykov <me@bykovk.pro>\n"
"Language-Team: Russian <me@bykovk.pro>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.16.0\n"

#: ../../examples.rst:2 5e02d15e6caf4addb7d37dfc523fc081
msgid "Examples"
msgstr "–ü—Ä–∏–º–µ—Ä—ã"

#: ../../examples.rst:4 cc64b7e209d143c3b478670b9fd76c8d
msgid ""
"This section provides various examples of using TGBot-Logging in "
"different scenarios."
msgstr ""

#: ../../examples.rst:7 22d436a5050346118cc7c9a07d172402
msgid "Basic Usage"
msgstr "–ë–∞–∑–æ–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ"

#: ../../examples.rst:9 e23fda7d330c4f168dc66714ba1a0cd4
msgid "Simple logging setup:"
msgstr ""

#: ../../examples.rst:11 67cc5059911b4d72a84ea113f83d83c0
msgid "examples/basic_usage.py"
msgstr ""

#: ../../examples.rst:11 61563283268c428aa3d4d1a889bcc319
#, python-format
msgid ""
"import logging\n"
"import time\n"
"from tgbot_logging import TelegramHandler\n"
"\n"
"def setup_logger():\n"
"    # Create logger\n"
"    logger = logging.getLogger('MyApp')\n"
"    logger.setLevel(logging.DEBUG)\n"
"\n"
"    # Create TelegramHandler with advanced features\n"
"    telegram_handler = TelegramHandler(\n"
"        token='YOUR_BOT_TOKEN',  # Replace with your bot token\n"
"        chat_ids=['YOUR_CHAT_ID'],  # Replace with your chat ID\n"
"        level=logging.INFO,\n"
"        parse_mode='HTML',  # Support for HTML formatting\n"
"        batch_size=5,  # Batch 5 messages together\n"
"        batch_interval=2.0,  # Send batch every 2 seconds or when full\n"
"        max_retries=3,  # Retry failed messages 3 times\n"
"        retry_delay=1.0,  # Wait 1 second between retries\n"
"        fmt='<b>%(levelname)s</b> [%(asctime)s]\\n%(message)s'  # Custom "
"HTML format\n"
"    )\n"
"\n"
"    # Add handler to logger\n"
"    logger.addHandler(telegram_handler)\n"
"    return logger\n"
"\n"
"def main():\n"
"    logger = setup_logger()\n"
"    \n"
"    # Basic logging examples\n"
"    logger.debug('This is a debug message (won\\'t be sent to Telegram)')"
"\n"
"    logger.info('This is an info message')\n"
"    logger.warning('This is a warning message')\n"
"    logger.error('This is an error message')\n"
"    \n"
"    # HTML formatting example\n"
"    logger.info('Message with <b>bold text</b> and <i>italic text</i>')\n"
"    \n"
"    # Batching example\n"
"    for i in range(10):\n"
"        logger.info(f'Batch message {i + 1}')\n"
"        time.sleep(0.1)  # Small delay to simulate real work\n"
"    \n"
"    # Error with traceback\n"
"    try:\n"
"        # Simulate an error\n"
"        result = 1 / 0\n"
"    except Exception as e:\n"
"        logger.exception('An error occurred:')\n"
"    \n"
"    # Keep the program running to allow batched messages to be sent\n"
"    time.sleep(3)\n"
"\n"
"if __name__ == '__main__':\n"
"    main() "
msgstr ""

#: ../../examples.rst:17 558f27bed98741b8aa225d78f1d58f9f
#, fuzzy
msgid "Custom Message Formats"
msgstr "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤—â–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π"

#: ../../examples.rst:19 a305ebd1665f4081ba3c7db97ba0bae1
#, fuzzy
msgid "Different message formatting options:"
msgstr "–°–æ–∑–¥–∞–π—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é —Ñ—É–Ω–∫—Ü–∏—é —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π:"

#: ../../examples.rst:21 b46d804f9f1244fea71c90362f350e82
msgid "examples/custom_format.py"
msgstr ""

#: ../../examples.rst:21 f0500657bf674bf28c22752d2d3e1174
#, python-format
msgid ""
"import logging\n"
"import time\n"
"from datetime import datetime\n"
"from tgbot_logging import TelegramHandler\n"
"\n"
"def minimal_format(record: logging.LogRecord, context: dict) -> str:\n"
"    \"\"\"Minimal format: message and level only.\"\"\"\n"
"    return f\"[{record.levelname}] {record.getMessage()}\"\n"
"\n"
"def detailed_format(record: logging.LogRecord, context: dict) -> str:\n"
"    \"\"\"Detailed format with additional information.\"\"\"\n"
"    # Use formatter from context\n"
"    timestamp = context['formatter'].formatTime(record)\n"
"    \n"
"    parts = [\n"
"        f\"üè¢ <b>[{context['project_name']}]</b>\",\n"
"        f\"{context['level_emojis'].get(record.levelno, 'üîµ')}\",\n"
"        f\"<b>{record.levelname}</b>\",\n"
"        f\"[{timestamp}]\",\n"
"        f\"\\nüìç {record.pathname}:{record.lineno}\",\n"
"        f\"\\nüí¨ {record.getMessage()}\"\n"
"    ]\n"
"    if record.exc_info:\n"
"        parts.append(f\"\\n‚ö†Ô∏è "
"<code>{context['formatter'].formatException(record.exc_info)}</code>\")\n"
"    return \" \".join(parts)\n"
"\n"
"def monitoring_format(record: logging.LogRecord, context: dict) -> str:\n"
"    \"\"\"Monitoring format with metrics.\"\"\"\n"
"    level_colors = {\n"
"        'DEBUG': '‚ö™Ô∏è',\n"
"        'INFO': 'üü¢',\n"
"        'WARNING': 'üü°',\n"
"        'ERROR': 'üî¥',\n"
"        'CRITICAL': '‚õîÔ∏è'\n"
"    }\n"
"    \n"
"    # Use formatter from context\n"
"    timestamp = context['formatter'].formatTime(record)\n"
"    \n"
"    return (\n"
"        f\"{level_colors.get(record.levelname, '‚ö™Ô∏è')} \"\n"
"        f\"<b>[{context['project_name']}]</b> \"\n"
"        f\"{record.getMessage()} \"\n"
"        f\"| {timestamp} \"\n"
"        f\"| {record.threadName}\"\n"
"    )\n"
"\n"
"def test_custom_formats():\n"
"    # Create loggers for different projects with different formats\n"
"    projects = {\n"
"        'API Service': {\n"
"            'logger': logging.getLogger('API'),\n"
"            'format': minimal_format,\n"
"            'emoji': 'üåê',\n"
"            'datefmt': '%H:%M:%S'  # Time only\n"
"        },\n"
"        'Database': {\n"
"            'logger': logging.getLogger('DB'),\n"
"            'format': detailed_format,\n"
"            'emoji': 'üóÑÔ∏è',\n"
"            'datefmt': '%Y-%m-%d %H:%M:%S.%f'  # Full date with "
"milliseconds\n"
"        },\n"
"        'Monitoring': {\n"
"            'logger': logging.getLogger('Monitor'),\n"
"            'format': monitoring_format,\n"
"            'emoji': 'üìä',\n"
"            'datefmt': '%d.%m.%Y %H:%M:%S'  # European date format\n"
"        }\n"
"    }\n"
"    \n"
"    # Configure loggers\n"
"    for project_name, config in projects.items():\n"
"        logger = config['logger']\n"
"        logger.setLevel(logging.INFO)\n"
"        \n"
"        # Create handler with custom format\n"
"        handler = TelegramHandler(\n"
"            token='YOUR_BOT_TOKEN',  # Replace with your bot token\n"
"            chat_ids=['YOUR_CHAT_ID'],  # Replace with your chat ID\n"
"            project_name=project_name,\n"
"            project_emoji=config['emoji'],\n"
"            message_format=config['format'],\n"
"            batch_size=2,\n"
"            batch_interval=1.0\n"
"        )\n"
"        logger.addHandler(handler)\n"
"    \n"
"    try:\n"
"        # API Service - minimal format\n"
"        api_logger = projects['API Service']['logger']\n"
"        api_logger.info(\"Request processed successfully\")\n"
"        api_logger.warning(\"High latency detected\")\n"
"        \n"
"        time.sleep(2)\n"
"        \n"
"        # Database - detailed format\n"
"        db_logger = projects['Database']['logger']\n"
"        db_logger.info(\"Connection pool initialized\")\n"
"        try:\n"
"            raise ValueError(\"Failed to connect to replica\")\n"
"        except Exception as e:\n"
"            db_logger.error(\"Database error occurred\", exc_info=True)\n"
"        \n"
"        time.sleep(2)\n"
"        \n"
"        # Monitoring - format with metrics\n"
"        mon_logger = projects['Monitoring']['logger']\n"
"        mon_logger.info(\"CPU Usage: 45%\")\n"
"        mon_logger.warning(\"Memory usage above 80%\")\n"
"        mon_logger.error(\"Disk space critical: 95%\")\n"
"        \n"
"        # Wait for all messages to be sent\n"
"        time.sleep(5)\n"
"        \n"
"    finally:\n"
"        # Close all handlers\n"
"        for config in projects.values():\n"
"            for handler in config['logger'].handlers:\n"
"                handler.close()\n"
"        time.sleep(2)\n"
"\n"
"if __name__ == '__main__':\n"
"    print('üöÄ Testing different log formats...\\n')\n"
"    test_custom_formats()\n"
"    print('\\n‚ú® Testing completed!') "
msgstr ""

#: ../../examples.rst:27 3300b840acc2470a848d9fed9c5a68ef
#, fuzzy
msgid "Time Formats"
msgstr "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"

#: ../../examples.rst:29 1377e263524543a49ad7377cda839fbb
#, fuzzy
msgid "Various time formatting examples:"
msgstr "–ü—Ä–∏–º–µ—Ä—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"

#: ../../examples.rst:31 8bc62e37832b40d78c193d4ecc6e29c7
msgid "examples/time_formats.py"
msgstr ""

#: ../../examples.rst:31 627ca7afd2b04125a71ea96ee5cf36f6
#, python-format
msgid ""
"import logging\n"
"import time\n"
"from datetime import datetime\n"
"from tgbot_logging import TelegramHandler\n"
"\n"
"def create_format(time_format: str):\n"
"    \"\"\"Creates a formatting function with the specified time "
"format.\"\"\"\n"
"    def format_func(record: logging.LogRecord, context: dict) -> str:\n"
"        # Create formatter for each time format\n"
"        formatter = logging.Formatter(datefmt=time_format)\n"
"        \n"
"        # Get current time for verification\n"
"        current_time = datetime.now()\n"
"        \n"
"        # Format time in different ways for debugging\n"
"        timestamp1 = formatter.formatTime(record)\n"
"        timestamp2 = current_time.strftime(time_format)\n"
"        timestamp3 = time.strftime(time_format)\n"
"        \n"
"        print(f\"\\nDebug time format '{time_format}':\")\n"
"        print(f\"  - Using formatter: {timestamp1}\")\n"
"        print(f\"  - Using datetime: {timestamp2}\")\n"
"        print(f\"  - Using time: {timestamp3}\")\n"
"        \n"
"        # Use datetime for formatting (more reliable method)\n"
"        timestamp = current_time.strftime(time_format)\n"
"        \n"
"        # Format message\n"
"        return (\n"
"            f\"{context['project_emoji']} "
"<b>[{context['project_name']}]</b>\\n\"\n"
"            f\"{context['level_emojis'].get(record.levelno, 'üîµ')} "
"<b>{record.levelname}</b>\\n\"\n"
"            f\"‚è∞ {timestamp}\\n\"\n"
"            f\"üí¨ {record.getMessage()}\"\n"
"        )\n"
"    return format_func\n"
"\n"
"def test_time_formats():\n"
"    # Various time formats for testing\n"
"    formats = {\n"
"        'Simple': {\n"
"            'format': '%H:%M:%S',\n"
"            'emoji': '‚åöÔ∏è',\n"
"            'description': 'Time only (hours:minutes:seconds)'\n"
"        },\n"
"        'Full': {\n"
"            'format': '%Y-%m-%d %H:%M:%S',\n"
"            'emoji': 'üìÖ',\n"
"            'description': 'Full date and time'\n"
"        },\n"
"        'European': {\n"
"            'format': '%d.%m.%Y %H:%M:%S',\n"
"            'emoji': 'üá™üá∫',\n"
"            'description': 'European format'\n"
"        },\n"
"        'US': {\n"
"            'format': '%m/%d/%Y %I:%M:%S %p',\n"
"            'emoji': 'üá∫üá∏',\n"
"            'description': 'US format with AM/PM'\n"
"        },\n"
"        'ISO': {\n"
"            'format': '%Y-%m-%dT%H:%M:%S',  # Simplified ISO format\n"
"            'emoji': 'üåê',\n"
"            'description': 'ISO format'\n"
"        },\n"
"        'Custom': {\n"
"            'format': '%d %B %Y %H:%M:%S',  # Using full month name\n"
"            'emoji': 'üìÜ',\n"
"            'description': 'Date with month name'\n"
"        }\n"
"    }\n"
"    \n"
"    # Create loggers for each format\n"
"    loggers = {}\n"
"    for name, config in formats.items():\n"
"        logger = logging.getLogger(f'TimeFormat.{name}')\n"
"        logger.setLevel(logging.INFO)\n"
"        \n"
"        # Create handler with time format\n"
"        handler = TelegramHandler(\n"
"            token='YOUR_BOT_TOKEN',  # Replace with your bot token\n"
"            chat_ids=['YOUR_CHAT_ID'],  # Replace with your chat ID\n"
"            project_name=f\"Time Format: {name}\",\n"
"            project_emoji=config['emoji'],\n"
"            message_format=create_format(config['format']),\n"
"            datefmt=config['format'],  # Add time format to handler\n"
"            batch_size=1,  # Send each message separately for clarity\n"
"            batch_interval=0.5\n"
"        )\n"
"        logger.addHandler(handler)\n"
"        loggers[name] = logger\n"
"    \n"
"    try:\n"
"        # Send test messages\n"
"        print(\"üöÄ Sending test messages with different time formats...\")"
"\n"
"        \n"
"        for name, config in formats.items():\n"
"            logger = loggers[name]\n"
"            print(f\"\\nüìù Testing format '{name}':\")\n"
"            print(f\"   Format: {config['format']}\")\n"
"            print(f\"   Description: {config['description']}\")\n"
"            \n"
"            # Send message\n"
"            logger.info(f\"Test message with time format: "
"{config['format']}\")\n"
"            time.sleep(1)  # Pause between messages\n"
"        \n"
"        # Send different logging levels for one format\n"
"        print(\"\\nüìä Testing different logging levels with ISO "
"format...\")\n"
"        iso_logger = loggers['ISO']\n"
"        iso_logger.debug(\"This is a debug message\")\n"
"        iso_logger.info(\"This is an info message\")\n"
"        iso_logger.warning(\"This is a warning message\")\n"
"        iso_logger.error(\"This is an error message\")\n"
"        iso_logger.critical(\"This is a critical message\")\n"
"        \n"
"        # Wait for all messages to be sent\n"
"        print(\"\\n‚è≥ Waiting for all messages to be sent...\")\n"
"        time.sleep(5)\n"
"        \n"
"    finally:\n"
"        # Close all handlers\n"
"        for logger in loggers.values():\n"
"            for handler in logger.handlers:\n"
"                handler.close()\n"
"        time.sleep(2)\n"
"\n"
"if __name__ == '__main__':\n"
"    print('üîç Starting time format testing...\\n')\n"
"    test_time_formats()\n"
"    print('\\n‚ú® Testing completed!') "
msgstr ""

#: ../../examples.rst:37 67df55225bf7469a8bd6ef1168130312
#, fuzzy
msgid "Multiple Projects"
msgstr "–ù–µ—Å–∫–æ–ª—å–∫–æ ID —á–∞—Ç–æ–≤"

#: ../../examples.rst:39 fa5fe4cbb1a3408daab70250893ae92d
msgid "Example of using the handler with multiple projects:"
msgstr ""

#: ../../examples.rst:41 d716635064d94a349978e6a6fc991e2c
msgid ""
"from tgbot_logging import TelegramHandler\n"
"import logging\n"
"\n"
"# Create loggers for different projects\n"
"projects = {\n"
"    'Frontend': ('üíª', logging.getLogger('Frontend')),\n"
"    'Backend': ('‚öôÔ∏è', logging.getLogger('Backend')),\n"
"    'Database': ('üóÑÔ∏è', logging.getLogger('Database'))\n"
"}\n"
"\n"
"# Configure loggers\n"
"for project_name, (emoji, logger) in projects.items():\n"
"    logger.setLevel(logging.INFO)\n"
"\n"
"    handler = TelegramHandler(\n"
"        token='YOUR_BOT_TOKEN',\n"
"        chat_ids=['YOUR_CHAT_ID'],\n"
"        level=logging.INFO,\n"
"        project_name=project_name,\n"
"        project_emoji=emoji,\n"
"        batch_size=2,\n"
"        batch_interval=1.0\n"
"    )\n"
"    logger.addHandler(handler)\n"
"\n"
"# Usage example\n"
"projects['Frontend'][1].info('User logged in')\n"
"projects['Backend'][1].warning('High API load')\n"
"projects['Database'][1].error('Replica connection error')"
msgstr ""

#: ../../examples.rst:74 1cd5eee0020d458e86abaf79fedafe87
#, fuzzy
msgid "Error Handling"
msgstr "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫"

#: ../../examples.rst:76 2595b295d8de44ff80b22f4da4d1e7c1
#, fuzzy
msgid "Example with error handling and retries:"
msgstr "–ü—Ä–∏–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫:"

#: ../../examples.rst:78 bfd8e670b0e749399bc4f7af75d17cb9
msgid ""
"import logging\n"
"from tgbot_logging import TelegramHandler\n"
"\n"
"logger = logging.getLogger('ErrorTest')\n"
"handler = TelegramHandler(\n"
"    token='YOUR_BOT_TOKEN',\n"
"    chat_ids=['YOUR_CHAT_ID'],\n"
"    max_retries=3,\n"
"    retry_delay=1.0\n"
")\n"
"logger.addHandler(handler)\n"
"\n"
"try:\n"
"    # Some code that might fail\n"
"    result = 1 / 0\n"
"except Exception as e:\n"
"    # This will include the full traceback\n"
"    logger.exception('An error occurred:')"
msgstr ""

#: ../../examples.rst:100 80dcbd7c123f4af183b80b487e76c7a6
msgid "Environment Variables"
msgstr "–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è"

#: ../../examples.rst:102 305b2c0a9d5b480a9ab064a9e0d23dde
msgid "Using environment variables for configuration:"
msgstr "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:"

#: ../../examples.rst:104 2aba58ea44b7482f91b0ad4a44a04cc4
msgid ""
"import os\n"
"from dotenv import load_dotenv\n"
"from tgbot_logging import TelegramHandler\n"
"\n"
"# Load environment variables\n"
"load_dotenv()\n"
"\n"
"handler = TelegramHandler(\n"
"    token=os.getenv('TELEGRAM_BOT_TOKEN'),\n"
"    chat_ids=[os.getenv('TELEGRAM_CHAT_ID')],\n"
"    level=os.getenv('LOG_LEVEL', 'INFO'),\n"
"    batch_size=int(os.getenv('BATCH_SIZE', 5)),\n"
"    batch_interval=float(os.getenv('BATCH_INTERVAL', 2.0)),\n"
"    project_name=os.getenv('PROJECT_NAME', 'MyProject'),\n"
"    project_emoji=os.getenv('PROJECT_EMOJI', 'üöÄ')\n"
")"
msgstr ""

#: ../../examples.rst:124 fdd40cf8d2894d8f812b4f42f1efc716
msgid "Custom Emoji Mapping"
msgstr "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏"

#: ../../examples.rst:126 594f8d441d2e4bbe8f3acec63c33b588
#, fuzzy
msgid "Customizing emojis for different log levels:"
msgstr "–û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ —Å–≤–æ–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ —ç–º–æ–¥–∑–∏ –¥–ª—è —É—Ä–æ–≤–Ω–µ–π –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è:"

#: ../../examples.rst:128 10cc0c23a322423c8efd7995ca95c4ac
msgid ""
"custom_emojis = {\n"
"    logging.DEBUG: 'üêõ',\n"
"    logging.INFO: 'üìù',\n"
"    logging.WARNING: '‚ö°Ô∏è',\n"
"    logging.ERROR: 'üí•',\n"
"    logging.CRITICAL: 'üÜò'\n"
"}\n"
"\n"
"handler = TelegramHandler(\n"
"    token='YOUR_BOT_TOKEN',\n"
"    chat_ids=['YOUR_CHAT_ID'],\n"
"    level_emojis=custom_emojis\n"
")"
msgstr ""

#: ../../examples.rst:145 41a6c0910d994ca485ce7527e16c48b6
msgid "Async Usage"
msgstr "–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ"

#: ../../examples.rst:147 7b3e40a1b0164aaebd56046bb8289dcc
#, fuzzy
msgid "Using the handler in an async application:"
msgstr "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ TGBot-Logging –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è—Ö:"

#: ../../examples.rst:149 4456346a6a5841838a9484473e20ae23
msgid ""
"import asyncio\n"
"import logging\n"
"from tgbot_logging import TelegramHandler\n"
"\n"
"async def main():\n"
"    logger = logging.getLogger('AsyncApp')\n"
"    handler = TelegramHandler(\n"
"        token='YOUR_BOT_TOKEN',\n"
"        chat_ids=['YOUR_CHAT_ID']\n"
"    )\n"
"    logger.addHandler(handler)\n"
"\n"
"    try:\n"
"        # Your async code here\n"
"        logger.info('Starting async operation...')\n"
"        await asyncio.sleep(1)\n"
"        logger.info('Async operation completed')\n"
"\n"
"    finally:\n"
"        # Properly close the handler\n"
"        handler.close()\n"
"        await asyncio.sleep(1)  # Wait for pending messages\n"
"\n"
"if __name__ == '__main__':\n"
"    asyncio.run(main())"
msgstr ""

#~ msgid "Here's a basic example of using TGBot-Logging:"
#~ msgstr "–í–æ—Ç –±–∞–∑–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è TGBot-Logging:"

#~ msgid "You can customize the message format using HTML or MarkdownV2:"
#~ msgstr "–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É—è HTML –∏–ª–∏ MarkdownV2:"

#~ msgid "HTML Example"
#~ msgstr "–ü—Ä–∏–º–µ—Ä HTML"

#~ msgid "MarkdownV2 Example"
#~ msgstr "–ü—Ä–∏–º–µ—Ä MarkdownV2"

#~ msgid "Message Batching"
#~ msgstr "–ü–∞–∫–µ—Ç–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"

#~ msgid "To improve performance, you can batch multiple messages:"
#~ msgstr ""
#~ "–î–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤—ã –º–æ–∂–µ—Ç–µ "
#~ "–æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –ø–∞–∫–µ—Ç–∞–º–∏:"

#~ msgid "Advanced Features"
#~ msgstr "–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏"

#~ msgid "You can send logs to multiple Telegram chats:"
#~ msgstr "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ª–æ–≥–∏ –≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Ç–æ–≤ Telegram:"

#~ msgid "Example of testing with TGBot-Logging:"
#~ msgstr "–ü—Ä–∏–º–µ—Ä —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å TGBot-Logging:"

#~ msgid "Production Configuration"
#~ msgstr "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞"

#~ msgid "Example of a production-ready configuration:"
#~ msgstr "–ü—Ä–∏–º–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏, –≥–æ—Ç–æ–≤–æ–π –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É:"

#~ msgid "Development Configuration"
#~ msgstr "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"

#~ msgid "Example of a development configuration:"
#~ msgstr "–ü—Ä–∏–º–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏:"

